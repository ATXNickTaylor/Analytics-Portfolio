-- Template: SQL to Create a Table, Import Data from a CSV File, and Perform Analysis

-- Step 1: Create the Table
-- Replace 'YourTableName' with the desired table name and define the columns and their data types.

CREATE TABLE YourTableName (
    Category DataType1, -- Example: Category
    SalesAmount DataType2, -- Example: SalesAmount
    Date DataType3, -- Example: Date
    ProductName VARCHAR(255) -- Added for string aggregation
    -- Add or remove columns as needed
);

-- Notes:
-- - DataType1, DataType2, etc., should be replaced with the actual data types suitable for the data in each column (e.g., INT, VARCHAR, DATE).
-- - Adjust the column names and data types according to the structure of your CSV file.
-- - Make sure the order and data types of columns match those in the CSV file.

-- Step 2: Import Data from CSV
-- Replace 'path/to/your/csvfile.csv' with the path to your CSV file.
-- Replace 'CSV_FILE_OPTIONS' with options specific to your CSV format (like delimiter, quote character, etc.).

COPY YourTableName
FROM 'path/to/your/csvfile.csv'
WITH (CSV_FILE_OPTIONS);

-- Notes:
-- - The 'COPY' command is used here as an example. The exact command may vary depending on your SQL database system.
-- - CSV_FILE_OPTIONS might include options like DELIMITER ',', HEADER, QUOTE '"' depending on your CSV file format.
-- - Ensure that the CSV file's path is accessible by the SQL server. In some environments, you might need to place the CSV file in a specific directory or use an absolute path.
-- - This operation assumes that the CSV file's structure matches the table's structure you created.

-- Example for PostgreSQL:
-- WITH (FORMAT csv, HEADER true, DELIMITER ',');

-- Example for MySQL (using LOAD DATA INFILE, run this as a separate command, not in SQL):
-- LOAD DATA INFILE 'path/to/your/csvfile.csv' INTO TABLE YourTableName
-- FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\n'
-- IGNORE 1 LINES;

-- Step 3: Analyze Data with Window Functions and String Aggregate

SELECT
    Category,
    Date,
    SalesAmount,
    ProductName,

    -- Window Function 1: Calculate running total within each category
    SUM(SalesAmount) OVER (PARTITION BY Category ORDER BY Date) AS RunningTotal,

    -- Window Function 2: Calculate the rank of sales amounts within each category
    RANK() OVER (PARTITION BY Category ORDER BY SalesAmount DESC) AS SalesRank,

    -- String Aggregate Function: Concatenate product names into a single string per date
    STRING_AGG(ProductName, ', ') WITHIN GROUP (ORDER BY ProductName) OVER (PARTITION BY Date) AS ProductsList

FROM
    YourTableName;

-- Notes:
-- - The SUM() OVER() function calculates the running total of SalesAmount for each Category, ordered by Date.
-- - The RANK() OVER() function assigns a rank to each sales amount within each category, with the highest sales getting rank 1.
-- - The STRING_AGG() function concatenates ProductNames into a single string for each Date, separated by commas.
-- - Ensure the CSV file's structure matches the table's structure, especially the new ProductName column.
